---
import Button from "@/components/primitives/Button.astro";
import Link from "@/components/primitives/Link.astro";

const navLinks = [
    { name: "Inicio", href: "/" },
    { name: "Habilidades", href: "#skills" },
    { name: "Proyectos", href: "/projects" },
    { name: "Metodología", href: "#methodology" },
    { name: "Testimonios", href: "#testimonials" },
    { name: "Contacto", href: "#contact" }
];
---

<header
    id="header-mobile"
    class="fixed top-0 left-0 py-6 max-w-[90rem] max-h-dvh w-dvw h-dvh z-50 transition-all duration-500 md:max-w-full md:backdrop-blur-lg md:h-max"
>
    <div
        class="container px-4 mx-auto flex items-center justify-between md:max-w-[90rem]"
    >
        <Link
            id="branding"
            href="/"
            class="font-heading font-display font-bold text-2xl md:text-4xl tracking-tight text-gradient transition-opacity duration-500"
        >
            JM
        </Link>

        {/* Desktop Navigation */}
        <nav class="hidden md:flex items-center space-x-8">
            {
                navLinks.map((link) => (
                    <Fragment key={link.name}>
                        <a
                            href={link.href}
                            class="text-xl font-sans text-foreground/80 hover:text-foreground link-underline hover:underline hover:decoration-wavy hover:decoration-foreground duration-300 transition-all"
                        >
                            {link.name}
                        </a>
                    </Fragment>
                ))
            }
            <Button
                href="#/contact"
                style="primary"
                text="Hablemos"
                size="lg"
            />
        </nav>

        {/* Mobile Hamburger Button con transición */}
        <button
            id="toggleMenu"
            class="toggle-menu md:hidden flex flex-col gap-[0.3rem] bg-transparent border-0 focus:outline-none z-50"
        >
            <span
                class="block w-5 h-0.5 bg-foreground rounded-full transition-transform origin-right duration-300 ease-in-out"
            ></span>
            <span
                class="block w-5 h-0.5 bg-foreground rounded-full transition-opacity duration-300 ease-in-out"
            ></span>
            <span
                class="block w-5 h-0.5 bg-foreground rounded-full transition-transform origin-right duration-300 ease-in-out"
            ></span>
        </button>
    </div>

    <div
        id="mobileModal"
        class="fixed inset-0 bg-stone-950/80 backdrop-blur-lg z-40 flex flex-col justify-center items-center transition-all duration-300 md:hidden opacity-0 pointer-events-none"
    >
        <nav class="flex flex-col items-start space-y-6">
            {
                navLinks.map((link) => (
                    <Fragment key={link.name}>
                        <a
                            href={link.href}
                            class="text-5xl font-semibold text-foreground/90 hover:text-white transition-colors"
                        >
                            {link.name}
                        </a>
                    </Fragment>
                ))
            }
        </nav>
    </div>
</header>

<script is:inline>
    // Función para manejar el menú móvil sin usar view transitions
    document.addEventListener("DOMContentLoaded", () => {
        const mobileModal = document.getElementById("mobileModal");
        const toggleBtn = document.getElementById("toggleMenu");
        const header = document.getElementsByTagName("header")[0];

        // Estado del menú
        let menuOpen = false;

        function toggleModal() {
            menuOpen = !menuOpen;

            if (menuOpen) {
                // Abrir menú
                mobileModal.style.opacity = "1";
                mobileModal.style.pointerEvents = "auto";
                document.body.style.overflow = "hidden"; // Prevenir scroll
            } else {
                // Cerrar menú
                mobileModal.style.opacity = "0";
                mobileModal.style.pointerEvents = "none";
                document.body.style.overflow = ""; // Restaurar scroll
            }

            toggleBtn.classList.toggle("open");
        }

        // Evento para el botón hamburguesa
        toggleBtn.addEventListener("click", toggleModal);

        // Cerrar el menú al hacer clic en un enlace
        const mobileLinks = mobileModal.querySelectorAll("a");
        mobileLinks.forEach((link) => {
            link.addEventListener("click", () => {
                if (menuOpen) toggleModal();
            });
        });

        // Función para verificar si existe scroll al cargar la página
        const checkInitialScroll = () => {
            if (window.scrollY > 40) {
                header.classList.add("hidden");
            } else {
                header.classList.remove("hidden");
            }
        };

        // Ejecutar verificación inicial cuando la página está cargada
        checkInitialScroll();

        // Control de la visibilidad del header al hacer scroll
        window.addEventListener("scroll", () => {
            if (window.scrollY > 40) {
                header.classList.add("hidden");
            } else {
                header.classList.remove("hidden");
            }
        });
    });
</script>
